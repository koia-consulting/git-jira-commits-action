const core = require('@actions/core');
const github = require('@actions/github');

function removeText(str, startString, endString) {
    let regex = new RegExp(`${startString}([\\s\\S]*?)${endString}`, 'g');
    var result = str.replace(regex, '');

    return result;
}

function getReportBody(descriptionBody, issuesInfo) {
    const SECTION_START = '\n---\n### JIRA Tickets in PR \n\n';
    const SECTION_END = '\n[ *this was generated by Github Actions Bot and can be overriten - dont write below this line * ]';

    let body = descriptionBody;
    if (body === null) {
        body = '';
    }
    else {
        body = body.split(SECTION_START)[0];
    }

    body += SECTION_START;
    body += issuesInfo;
    body += SECTION_END;
    return body;
}

async function appendDescriptionToPR(description, octokit, repo, issue_number) {

    await octokit.pulls.update({
        owner: repo.owner,
        repo: repo.repo,
        pull_number: issue_number,
        body: description
    });
}

async function run() {
    try {
        const token = process.env.GITHUB_TOKEN;
        const issuesInfo = process.env.ISSUES_INFO;
        const { repo, issue: { number: issue_number } } = github.context;

        const octokit = github.getOctokit(token);

        const { data: pullRequest } = await octokit.pulls.get({
            owner: repo.owner,
            repo: repo.repo,
            pull_number: issue_number
        });
        const report = getReportBody(pullRequest.body, issuesInfo);
        await appendDescriptionToPR(report, octokit, repo, issue_number)

    } catch (error) {
        core.setFailed(error.message);
    }
}

run();
