const core = require('@actions/core');
const github = require('@actions/github');

function removeText(str, startString, endString) {
    let regex = new RegExp(`${startString}([\\s\\S]*?)${endString}`, 'g');
    var result = str.replace(regex, '');

    return result;
}

function appendDescriptionToPR(comment, octokit, repo, issue_number) {
    const SECTION_START = '### JIRA Tickets in PR \n';
    const SECTION_END = '[ this was generated by Github Actions Bot and can be overriten]\n';

    let body = pullRequest.body;
    if (body === null) {
        body = '';
    }
    else {
        body += removeSpecificText(pullRequest.body, markerStart, markerEnd);
    }

    body += markerStart;
    body += issuesInfo;
    body += markerEnd;

    await octokit.pulls.update({
        owner: repo.owner,
        repo: repo.repo,
        pull_number: issue_number,
        body: body
    });
}

async function run() {
    try {
        const token = process.env.GITHUB_TOKEN;
        const issuesInfo = process.env.ISSUES_INFO;
        const { repo, issue: { number: issue_number } } = github.context;

        const octokit = github.getOctokit(token);

        const { data: pullRequest } = await octokit.pulls.get({
            owner: repo.owner,
            repo: repo.repo,
            pull_number: issue_number
        });

        appendDescriptionToPR(pullRequest.body, octokit, repo, issue_number)

        // const commentsResponse = await octokit.rest.issues.listComments({
        //     owner: repo.owner,
        //     repo: repo.repo,
        //     issue_number: pullRequest.number,
        // });
        //
        // core.notice(commentsResponse.data);
        //
        // for(let comment of commentsResponse.data){
        //     core.notice(comment);
        // }
        //
        // const markerStart = '### JIRA Tickets in PR \n';
        // const markerEnd = '\n';
        //
        // let comment = markerStart;
        // comment += issuesInfo;
        // comment += markerEnd;
        //
        // await octokit.rest.issues.createComment({
        //     owner: repo.owner,
        //     repo: repo.repo,
        //     issue_number: pullRequest.number,
        //     body: comment,
        // });

    } catch (error) {
        core.setFailed(error.message);
    }
}

run();
